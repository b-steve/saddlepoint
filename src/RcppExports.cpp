// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/saddlepoint_types.h"
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// makeAdaptorUsingRfunctions
Rcpp::XPtr<Adaptor> makeAdaptorUsingRfunctions(Rcpp::Function fn, Rcpp::Function grad_fn);
RcppExport SEXP _saddlepoint_makeAdaptorUsingRfunctions(SEXP fnSEXP, SEXP grad_fnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Function >::type fn(fnSEXP);
    Rcpp::traits::input_parameter< Rcpp::Function >::type grad_fn(grad_fnSEXP);
    rcpp_result_gen = Rcpp::wrap(makeAdaptorUsingRfunctions(fn, grad_fn));
    return rcpp_result_gen;
END_RCPP
}
// makeSubvectorAdaptor
Rcpp::XPtr<Adaptor> makeSubvectorAdaptor(Eigen::Index pos, Eigen::Index len);
RcppExport SEXP _saddlepoint_makeSubvectorAdaptor(SEXP posSEXP, SEXP lenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Index >::type pos(posSEXP);
    Rcpp::traits::input_parameter< Eigen::Index >::type len(lenSEXP);
    rcpp_result_gen = Rcpp::wrap(makeSubvectorAdaptor(pos, len));
    return rcpp_result_gen;
END_RCPP
}
// makeVectorSubsetByIndicesAdaptor
Rcpp::XPtr<Adaptor> makeVectorSubsetByIndicesAdaptor(Eigen::Matrix<Eigen::Index, Eigen::Dynamic, 1> indices);
RcppExport SEXP _saddlepoint_makeVectorSubsetByIndicesAdaptor(SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Matrix<Eigen::Index, Eigen::Dynamic, 1> >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(makeVectorSubsetByIndicesAdaptor(indices));
    return rcpp_result_gen;
END_RCPP
}
// makeSavedVectorAdaptor
Rcpp::XPtr<Adaptor> makeSavedVectorAdaptor(vec fixed_parameter_values);
RcppExport SEXP _saddlepoint_makeSavedVectorAdaptor(SEXP fixed_parameter_valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type fixed_parameter_values(fixed_parameter_valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(makeSavedVectorAdaptor(fixed_parameter_values));
    return rcpp_result_gen;
END_RCPP
}
// adapt_CGF
Rcpp::XPtr<CGF_with_AD> adapt_CGF(Rcpp::XPtr<CGF_with_AD> base_cgf, Rcpp::XPtr<Adaptor> adaptor);
RcppExport SEXP _saddlepoint_adapt_CGF(SEXP base_cgfSEXP, SEXP adaptorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<CGF_with_AD> >::type base_cgf(base_cgfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<Adaptor> >::type adaptor(adaptorSEXP);
    rcpp_result_gen = Rcpp::wrap(adapt_CGF(base_cgf, adaptor));
    return rcpp_result_gen;
END_RCPP
}
// makeADFunK1
Rcpp::XPtr< CppAD::ADFun<double> > makeADFunK1(vec tvec, vec theta, Rcpp::XPtr<CGF_with_AD> modelCGF);
RcppExport SEXP _saddlepoint_makeADFunK1(SEXP tvecSEXP, SEXP thetaSEXP, SEXP modelCGFSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type tvec(tvecSEXP);
    Rcpp::traits::input_parameter< vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<CGF_with_AD> >::type modelCGF(modelCGFSEXP);
    rcpp_result_gen = Rcpp::wrap(makeADFunK1(tvec, theta, modelCGF));
    return rcpp_result_gen;
END_RCPP
}
// K1_with_gradient
Rcpp::List K1_with_gradient(vec combined_vector, Rcpp::XPtr< CppAD::ADFun<double> > ADfunK1);
RcppExport SEXP _saddlepoint_K1_with_gradient(SEXP combined_vectorSEXP, SEXP ADfunK1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type combined_vector(combined_vectorSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr< CppAD::ADFun<double> > >::type ADfunK1(ADfunK1SEXP);
    rcpp_result_gen = Rcpp::wrap(K1_with_gradient(combined_vector, ADfunK1));
    return rcpp_result_gen;
END_RCPP
}
// makeADFunNegll
Rcpp::XPtr< CppAD::ADFun<double> > makeADFunNegll(vec tvec, vec theta, Rcpp::XPtr<CGF_with_AD> modelCGF);
RcppExport SEXP _saddlepoint_makeADFunNegll(SEXP tvecSEXP, SEXP thetaSEXP, SEXP modelCGFSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type tvec(tvecSEXP);
    Rcpp::traits::input_parameter< vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<CGF_with_AD> >::type modelCGF(modelCGFSEXP);
    rcpp_result_gen = Rcpp::wrap(makeADFunNegll(tvec, theta, modelCGF));
    return rcpp_result_gen;
END_RCPP
}
// negll_with_gradient
Rcpp::List negll_with_gradient(vec combined_vector, Rcpp::XPtr< CppAD::ADFun<double> > ADfun_negll);
RcppExport SEXP _saddlepoint_negll_with_gradient(SEXP combined_vectorSEXP, SEXP ADfun_negllSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type combined_vector(combined_vectorSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr< CppAD::ADFun<double> > >::type ADfun_negll(ADfun_negllSEXP);
    rcpp_result_gen = Rcpp::wrap(negll_with_gradient(combined_vector, ADfun_negll));
    return rcpp_result_gen;
END_RCPP
}
// makeADFunIneqConstraint
Rcpp::XPtr< CppAD::ADFun<double> > makeADFunIneqConstraint(vec tvec, vec theta, Rcpp::XPtr<CGF_with_AD> modelCGF);
RcppExport SEXP _saddlepoint_makeADFunIneqConstraint(SEXP tvecSEXP, SEXP thetaSEXP, SEXP modelCGFSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type tvec(tvecSEXP);
    Rcpp::traits::input_parameter< vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<CGF_with_AD> >::type modelCGF(modelCGFSEXP);
    rcpp_result_gen = Rcpp::wrap(makeADFunIneqConstraint(tvec, theta, modelCGF));
    return rcpp_result_gen;
END_RCPP
}
// ineqConstraint_with_gradient
Rcpp::List ineqConstraint_with_gradient(vec combined_vector, Rcpp::XPtr< CppAD::ADFun<double> > ADfun_ineqConstraint);
RcppExport SEXP _saddlepoint_ineqConstraint_with_gradient(SEXP combined_vectorSEXP, SEXP ADfun_ineqConstraintSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type combined_vector(combined_vectorSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr< CppAD::ADFun<double> > >::type ADfun_ineqConstraint(ADfun_ineqConstraintSEXP);
    rcpp_result_gen = Rcpp::wrap(ineqConstraint_with_gradient(combined_vector, ADfun_ineqConstraint));
    return rcpp_result_gen;
END_RCPP
}
// make_BinomialCGF
Rcpp::XPtr<CGF_with_AD> make_BinomialCGF();
RcppExport SEXP _saddlepoint_make_BinomialCGF() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(make_BinomialCGF());
    return rcpp_result_gen;
END_RCPP
}
// make_BinomialNonIdenticalCGF
Rcpp::XPtr<CGF_with_AD> make_BinomialNonIdenticalCGF();
RcppExport SEXP _saddlepoint_make_BinomialNonIdenticalCGF() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(make_BinomialNonIdenticalCGF());
    return rcpp_result_gen;
END_RCPP
}
// make_BinomialModelCGF
Rcpp::XPtr<CGF_with_AD> make_BinomialModelCGF(Rcpp::XPtr<Adaptor> n_adaptor, Rcpp::XPtr<Adaptor> prob_adaptor);
RcppExport SEXP _saddlepoint_make_BinomialModelCGF(SEXP n_adaptorSEXP, SEXP prob_adaptorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<Adaptor> >::type n_adaptor(n_adaptorSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<Adaptor> >::type prob_adaptor(prob_adaptorSEXP);
    rcpp_result_gen = Rcpp::wrap(make_BinomialModelCGF(n_adaptor, prob_adaptor));
    return rcpp_result_gen;
END_RCPP
}
// make_PoissonCGF
Rcpp::XPtr<CGF_with_AD> make_PoissonCGF();
RcppExport SEXP _saddlepoint_make_PoissonCGF() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(make_PoissonCGF());
    return rcpp_result_gen;
END_RCPP
}
// make_PoissonNonIdenticalCGF
Rcpp::XPtr<CGF_with_AD> make_PoissonNonIdenticalCGF();
RcppExport SEXP _saddlepoint_make_PoissonNonIdenticalCGF() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(make_PoissonNonIdenticalCGF());
    return rcpp_result_gen;
END_RCPP
}
// make_PoissonModelCGF
Rcpp::XPtr<CGF_with_AD> make_PoissonModelCGF(Rcpp::XPtr<Adaptor> lambda_adaptor);
RcppExport SEXP _saddlepoint_make_PoissonModelCGF(SEXP lambda_adaptorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<Adaptor> >::type lambda_adaptor(lambda_adaptorSEXP);
    rcpp_result_gen = Rcpp::wrap(make_PoissonModelCGF(lambda_adaptor));
    return rcpp_result_gen;
END_RCPP
}
// make_ExponentialCGF
Rcpp::XPtr<CGF_with_AD> make_ExponentialCGF();
RcppExport SEXP _saddlepoint_make_ExponentialCGF() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(make_ExponentialCGF());
    return rcpp_result_gen;
END_RCPP
}
// make_ExponentialNonIdenticalCGF
Rcpp::XPtr<CGF_with_AD> make_ExponentialNonIdenticalCGF();
RcppExport SEXP _saddlepoint_make_ExponentialNonIdenticalCGF() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(make_ExponentialNonIdenticalCGF());
    return rcpp_result_gen;
END_RCPP
}
// make_ExponentialModelCGF
Rcpp::XPtr<CGF_with_AD> make_ExponentialModelCGF(Rcpp::XPtr<Adaptor> lambda_adaptor);
RcppExport SEXP _saddlepoint_make_ExponentialModelCGF(SEXP lambda_adaptorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<Adaptor> >::type lambda_adaptor(lambda_adaptorSEXP);
    rcpp_result_gen = Rcpp::wrap(make_ExponentialModelCGF(lambda_adaptor));
    return rcpp_result_gen;
END_RCPP
}
// make_GeometricCGF
Rcpp::XPtr<CGF_with_AD> make_GeometricCGF();
RcppExport SEXP _saddlepoint_make_GeometricCGF() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(make_GeometricCGF());
    return rcpp_result_gen;
END_RCPP
}
// make_GeometricNonIdenticalCGF
Rcpp::XPtr<CGF_with_AD> make_GeometricNonIdenticalCGF();
RcppExport SEXP _saddlepoint_make_GeometricNonIdenticalCGF() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(make_GeometricNonIdenticalCGF());
    return rcpp_result_gen;
END_RCPP
}
// make_GeometricModelCGF
Rcpp::XPtr<CGF_with_AD> make_GeometricModelCGF(Rcpp::XPtr<Adaptor> p_adaptor);
RcppExport SEXP _saddlepoint_make_GeometricModelCGF(SEXP p_adaptorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<Adaptor> >::type p_adaptor(p_adaptorSEXP);
    rcpp_result_gen = Rcpp::wrap(make_GeometricModelCGF(p_adaptor));
    return rcpp_result_gen;
END_RCPP
}
// make_GeometricNonIdenticalModelCGF
Rcpp::XPtr<CGF_with_AD> make_GeometricNonIdenticalModelCGF(Rcpp::XPtr<Adaptor> p_adaptor);
RcppExport SEXP _saddlepoint_make_GeometricNonIdenticalModelCGF(SEXP p_adaptorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<Adaptor> >::type p_adaptor(p_adaptorSEXP);
    rcpp_result_gen = Rcpp::wrap(make_GeometricNonIdenticalModelCGF(p_adaptor));
    return rcpp_result_gen;
END_RCPP
}
// make_GammaCGF
Rcpp::XPtr<CGF_with_AD> make_GammaCGF();
RcppExport SEXP _saddlepoint_make_GammaCGF() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(make_GammaCGF());
    return rcpp_result_gen;
END_RCPP
}
// make_GammaModelCGF
Rcpp::XPtr<CGF_with_AD> make_GammaModelCGF(Rcpp::XPtr<Adaptor> shape_adaptor, Rcpp::XPtr<Adaptor> rate_adaptor);
RcppExport SEXP _saddlepoint_make_GammaModelCGF(SEXP shape_adaptorSEXP, SEXP rate_adaptorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<Adaptor> >::type shape_adaptor(shape_adaptorSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<Adaptor> >::type rate_adaptor(rate_adaptorSEXP);
    rcpp_result_gen = Rcpp::wrap(make_GammaModelCGF(shape_adaptor, rate_adaptor));
    return rcpp_result_gen;
END_RCPP
}
// make_MultinomialCGF
Rcpp::XPtr<CGF_with_AD> make_MultinomialCGF();
RcppExport SEXP _saddlepoint_make_MultinomialCGF() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(make_MultinomialCGF());
    return rcpp_result_gen;
END_RCPP
}
// make_MultinomialModelCGF
Rcpp::XPtr<CGF_with_AD> make_MultinomialModelCGF(Rcpp::XPtr<Adaptor> n_adaptor, Rcpp::XPtr<Adaptor> probVector_adaptor);
RcppExport SEXP _saddlepoint_make_MultinomialModelCGF(SEXP n_adaptorSEXP, SEXP probVector_adaptorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<Adaptor> >::type n_adaptor(n_adaptorSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<Adaptor> >::type probVector_adaptor(probVector_adaptorSEXP);
    rcpp_result_gen = Rcpp::wrap(make_MultinomialModelCGF(n_adaptor, probVector_adaptor));
    return rcpp_result_gen;
END_RCPP
}
// make_SubunitaryMultinomialModelCGF
Rcpp::XPtr<CGF_with_AD> make_SubunitaryMultinomialModelCGF(Rcpp::XPtr<Adaptor> n_adaptor, Rcpp::XPtr<Adaptor> probVector_adaptor);
RcppExport SEXP _saddlepoint_make_SubunitaryMultinomialModelCGF(SEXP n_adaptorSEXP, SEXP probVector_adaptorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<Adaptor> >::type n_adaptor(n_adaptorSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<Adaptor> >::type probVector_adaptor(probVector_adaptorSEXP);
    rcpp_result_gen = Rcpp::wrap(make_SubunitaryMultinomialModelCGF(n_adaptor, probVector_adaptor));
    return rcpp_result_gen;
END_RCPP
}
// K
double K(vec tvec, vec parameter_vector, Rcpp::XPtr<CGF_with_AD> base_cgf);
RcppExport SEXP _saddlepoint_K(SEXP tvecSEXP, SEXP parameter_vectorSEXP, SEXP base_cgfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type tvec(tvecSEXP);
    Rcpp::traits::input_parameter< vec >::type parameter_vector(parameter_vectorSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<CGF_with_AD> >::type base_cgf(base_cgfSEXP);
    rcpp_result_gen = Rcpp::wrap(K(tvec, parameter_vector, base_cgf));
    return rcpp_result_gen;
END_RCPP
}
// K1
vec K1(vec tvec, vec parameter_vector, Rcpp::XPtr<CGF_with_AD> base_cgf);
RcppExport SEXP _saddlepoint_K1(SEXP tvecSEXP, SEXP parameter_vectorSEXP, SEXP base_cgfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type tvec(tvecSEXP);
    Rcpp::traits::input_parameter< vec >::type parameter_vector(parameter_vectorSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<CGF_with_AD> >::type base_cgf(base_cgfSEXP);
    rcpp_result_gen = Rcpp::wrap(K1(tvec, parameter_vector, base_cgf));
    return rcpp_result_gen;
END_RCPP
}
// K2
mat K2(vec tvec, vec parameter_vector, Rcpp::XPtr<CGF_with_AD> base_cgf);
RcppExport SEXP _saddlepoint_K2(SEXP tvecSEXP, SEXP parameter_vectorSEXP, SEXP base_cgfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type tvec(tvecSEXP);
    Rcpp::traits::input_parameter< vec >::type parameter_vector(parameter_vectorSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<CGF_with_AD> >::type base_cgf(base_cgfSEXP);
    rcpp_result_gen = Rcpp::wrap(K2(tvec, parameter_vector, base_cgf));
    return rcpp_result_gen;
END_RCPP
}
// ineq_constraint
vec ineq_constraint(vec tvec, vec parameter_vector, Rcpp::XPtr<CGF_with_AD> base_cgf);
RcppExport SEXP _saddlepoint_ineq_constraint(SEXP tvecSEXP, SEXP parameter_vectorSEXP, SEXP base_cgfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type tvec(tvecSEXP);
    Rcpp::traits::input_parameter< vec >::type parameter_vector(parameter_vectorSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<CGF_with_AD> >::type base_cgf(base_cgfSEXP);
    rcpp_result_gen = Rcpp::wrap(ineq_constraint(tvec, parameter_vector, base_cgf));
    return rcpp_result_gen;
END_RCPP
}
// neg_ll
double neg_ll(vec tvec, vec parameter_vector, Rcpp::XPtr<CGF_with_AD> base_cgf);
RcppExport SEXP _saddlepoint_neg_ll(SEXP tvecSEXP, SEXP parameter_vectorSEXP, SEXP base_cgfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type tvec(tvecSEXP);
    Rcpp::traits::input_parameter< vec >::type parameter_vector(parameter_vectorSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<CGF_with_AD> >::type base_cgf(base_cgfSEXP);
    rcpp_result_gen = Rcpp::wrap(neg_ll(tvec, parameter_vector, base_cgf));
    return rcpp_result_gen;
END_RCPP
}
// func_T
double func_T(vec tvec, vec parameter_vector, Rcpp::XPtr<CGF_with_AD> base_cgf);
RcppExport SEXP _saddlepoint_func_T(SEXP tvecSEXP, SEXP parameter_vectorSEXP, SEXP base_cgfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type tvec(tvecSEXP);
    Rcpp::traits::input_parameter< vec >::type parameter_vector(parameter_vectorSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<CGF_with_AD> >::type base_cgf(base_cgfSEXP);
    rcpp_result_gen = Rcpp::wrap(func_T(tvec, parameter_vector, base_cgf));
    return rcpp_result_gen;
END_RCPP
}
// K4operatorAABB
double K4operatorAABB(vec tvec, mat a1, mat a2, vec parameter_vector, Rcpp::XPtr<CGF_with_AD> base_cgf);
RcppExport SEXP _saddlepoint_K4operatorAABB(SEXP tvecSEXP, SEXP a1SEXP, SEXP a2SEXP, SEXP parameter_vectorSEXP, SEXP base_cgfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type tvec(tvecSEXP);
    Rcpp::traits::input_parameter< mat >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< mat >::type a2(a2SEXP);
    Rcpp::traits::input_parameter< vec >::type parameter_vector(parameter_vectorSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<CGF_with_AD> >::type base_cgf(base_cgfSEXP);
    rcpp_result_gen = Rcpp::wrap(K4operatorAABB(tvec, a1, a2, parameter_vector, base_cgf));
    return rcpp_result_gen;
END_RCPP
}
// K3K3operatorAABBCC
double K3K3operatorAABBCC(vec tvec, mat a1, mat a2, mat a3, vec parameter_vector, Rcpp::XPtr<CGF_with_AD> base_cgf);
RcppExport SEXP _saddlepoint_K3K3operatorAABBCC(SEXP tvecSEXP, SEXP a1SEXP, SEXP a2SEXP, SEXP a3SEXP, SEXP parameter_vectorSEXP, SEXP base_cgfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type tvec(tvecSEXP);
    Rcpp::traits::input_parameter< mat >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< mat >::type a2(a2SEXP);
    Rcpp::traits::input_parameter< mat >::type a3(a3SEXP);
    Rcpp::traits::input_parameter< vec >::type parameter_vector(parameter_vectorSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<CGF_with_AD> >::type base_cgf(base_cgfSEXP);
    rcpp_result_gen = Rcpp::wrap(K3K3operatorAABBCC(tvec, a1, a2, a3, parameter_vector, base_cgf));
    return rcpp_result_gen;
END_RCPP
}
// make_sum_of_iidCGF
Rcpp::XPtr<CGF_with_AD> make_sum_of_iidCGF(Rcpp::XPtr<CGF_with_AD> base_cgf, double n);
RcppExport SEXP _saddlepoint_make_sum_of_iidCGF(SEXP base_cgfSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<CGF_with_AD> >::type base_cgf(base_cgfSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(make_sum_of_iidCGF(base_cgf, n));
    return rcpp_result_gen;
END_RCPP
}
// make_sum_of_independentCGF
Rcpp::XPtr<CGF_with_AD> make_sum_of_independentCGF(Rcpp::List cgf_list);
RcppExport SEXP _saddlepoint_make_sum_of_independentCGF(SEXP cgf_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type cgf_list(cgf_listSEXP);
    rcpp_result_gen = Rcpp::wrap(make_sum_of_independentCGF(cgf_list));
    return rcpp_result_gen;
END_RCPP
}
// make_ConcatenationCGF
Rcpp::XPtr<CGF_with_AD> make_ConcatenationCGF(Rcpp::List cgf_length_list);
RcppExport SEXP _saddlepoint_make_ConcatenationCGF(SEXP cgf_length_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type cgf_length_list(cgf_length_listSEXP);
    rcpp_result_gen = Rcpp::wrap(make_ConcatenationCGF(cgf_length_list));
    return rcpp_result_gen;
END_RCPP
}
// make_linearly_mappedCGF
Rcpp::XPtr<CGF_with_AD> make_linearly_mappedCGF(Rcpp::XPtr<CGF_with_AD> base_cgf, mat Amat);
RcppExport SEXP _saddlepoint_make_linearly_mappedCGF(SEXP base_cgfSEXP, SEXP AmatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<CGF_with_AD> >::type base_cgf(base_cgfSEXP);
    Rcpp::traits::input_parameter< mat >::type Amat(AmatSEXP);
    rcpp_result_gen = Rcpp::wrap(make_linearly_mappedCGF(base_cgf, Amat));
    return rcpp_result_gen;
END_RCPP
}
// make_randomly_stopped_sumCGF
Rcpp::XPtr<CGF_with_AD> make_randomly_stopped_sumCGF(Rcpp::XPtr<CGF_with_AD> count_base_cgf, Rcpp::XPtr<CGF_with_AD> summand_base_cgf);
RcppExport SEXP _saddlepoint_make_randomly_stopped_sumCGF(SEXP count_base_cgfSEXP, SEXP summand_base_cgfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<CGF_with_AD> >::type count_base_cgf(count_base_cgfSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<CGF_with_AD> >::type summand_base_cgf(summand_base_cgfSEXP);
    rcpp_result_gen = Rcpp::wrap(make_randomly_stopped_sumCGF(count_base_cgf, summand_base_cgf));
    return rcpp_result_gen;
END_RCPP
}
// make_scalar_to_iidCGF
Rcpp::XPtr<CGF_with_AD> make_scalar_to_iidCGF(Rcpp::XPtr<CGF_with_AD> scalar_base_cgf);
RcppExport SEXP _saddlepoint_make_scalar_to_iidCGF(SEXP scalar_base_cgfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<CGF_with_AD> >::type scalar_base_cgf(scalar_base_cgfSEXP);
    rcpp_result_gen = Rcpp::wrap(make_scalar_to_iidCGF(scalar_base_cgf));
    return rcpp_result_gen;
END_RCPP
}
// make_iidReplicatesCGF
Rcpp::XPtr<CGF_with_AD> make_iidReplicatesCGF(Rcpp::XPtr<CGF_with_AD> base_cgf, double block_size);
RcppExport SEXP _saddlepoint_make_iidReplicatesCGF(SEXP base_cgfSEXP, SEXP block_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<CGF_with_AD> >::type base_cgf(base_cgfSEXP);
    Rcpp::traits::input_parameter< double >::type block_size(block_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(make_iidReplicatesCGF(base_cgf, block_size));
    return rcpp_result_gen;
END_RCPP
}
// computeFuncTGradient
Rcpp::List computeFuncTGradient(vec tvec, vec theta, vec observations, Rcpp::XPtr<CGF_with_AD> modelCGF);
RcppExport SEXP _saddlepoint_computeFuncTGradient(SEXP tvecSEXP, SEXP thetaSEXP, SEXP observationsSEXP, SEXP modelCGFSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type tvec(tvecSEXP);
    Rcpp::traits::input_parameter< vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< vec >::type observations(observationsSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<CGF_with_AD> >::type modelCGF(modelCGFSEXP);
    rcpp_result_gen = Rcpp::wrap(computeFuncTGradient(tvec, theta, observations, modelCGF));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_saddlepoint_makeAdaptorUsingRfunctions", (DL_FUNC) &_saddlepoint_makeAdaptorUsingRfunctions, 2},
    {"_saddlepoint_makeSubvectorAdaptor", (DL_FUNC) &_saddlepoint_makeSubvectorAdaptor, 2},
    {"_saddlepoint_makeVectorSubsetByIndicesAdaptor", (DL_FUNC) &_saddlepoint_makeVectorSubsetByIndicesAdaptor, 1},
    {"_saddlepoint_makeSavedVectorAdaptor", (DL_FUNC) &_saddlepoint_makeSavedVectorAdaptor, 1},
    {"_saddlepoint_adapt_CGF", (DL_FUNC) &_saddlepoint_adapt_CGF, 2},
    {"_saddlepoint_makeADFunK1", (DL_FUNC) &_saddlepoint_makeADFunK1, 3},
    {"_saddlepoint_K1_with_gradient", (DL_FUNC) &_saddlepoint_K1_with_gradient, 2},
    {"_saddlepoint_makeADFunNegll", (DL_FUNC) &_saddlepoint_makeADFunNegll, 3},
    {"_saddlepoint_negll_with_gradient", (DL_FUNC) &_saddlepoint_negll_with_gradient, 2},
    {"_saddlepoint_makeADFunIneqConstraint", (DL_FUNC) &_saddlepoint_makeADFunIneqConstraint, 3},
    {"_saddlepoint_ineqConstraint_with_gradient", (DL_FUNC) &_saddlepoint_ineqConstraint_with_gradient, 2},
    {"_saddlepoint_make_BinomialCGF", (DL_FUNC) &_saddlepoint_make_BinomialCGF, 0},
    {"_saddlepoint_make_BinomialNonIdenticalCGF", (DL_FUNC) &_saddlepoint_make_BinomialNonIdenticalCGF, 0},
    {"_saddlepoint_make_BinomialModelCGF", (DL_FUNC) &_saddlepoint_make_BinomialModelCGF, 2},
    {"_saddlepoint_make_PoissonCGF", (DL_FUNC) &_saddlepoint_make_PoissonCGF, 0},
    {"_saddlepoint_make_PoissonNonIdenticalCGF", (DL_FUNC) &_saddlepoint_make_PoissonNonIdenticalCGF, 0},
    {"_saddlepoint_make_PoissonModelCGF", (DL_FUNC) &_saddlepoint_make_PoissonModelCGF, 1},
    {"_saddlepoint_make_ExponentialCGF", (DL_FUNC) &_saddlepoint_make_ExponentialCGF, 0},
    {"_saddlepoint_make_ExponentialNonIdenticalCGF", (DL_FUNC) &_saddlepoint_make_ExponentialNonIdenticalCGF, 0},
    {"_saddlepoint_make_ExponentialModelCGF", (DL_FUNC) &_saddlepoint_make_ExponentialModelCGF, 1},
    {"_saddlepoint_make_GeometricCGF", (DL_FUNC) &_saddlepoint_make_GeometricCGF, 0},
    {"_saddlepoint_make_GeometricNonIdenticalCGF", (DL_FUNC) &_saddlepoint_make_GeometricNonIdenticalCGF, 0},
    {"_saddlepoint_make_GeometricModelCGF", (DL_FUNC) &_saddlepoint_make_GeometricModelCGF, 1},
    {"_saddlepoint_make_GeometricNonIdenticalModelCGF", (DL_FUNC) &_saddlepoint_make_GeometricNonIdenticalModelCGF, 1},
    {"_saddlepoint_make_GammaCGF", (DL_FUNC) &_saddlepoint_make_GammaCGF, 0},
    {"_saddlepoint_make_GammaModelCGF", (DL_FUNC) &_saddlepoint_make_GammaModelCGF, 2},
    {"_saddlepoint_make_MultinomialCGF", (DL_FUNC) &_saddlepoint_make_MultinomialCGF, 0},
    {"_saddlepoint_make_MultinomialModelCGF", (DL_FUNC) &_saddlepoint_make_MultinomialModelCGF, 2},
    {"_saddlepoint_make_SubunitaryMultinomialModelCGF", (DL_FUNC) &_saddlepoint_make_SubunitaryMultinomialModelCGF, 2},
    {"_saddlepoint_K", (DL_FUNC) &_saddlepoint_K, 3},
    {"_saddlepoint_K1", (DL_FUNC) &_saddlepoint_K1, 3},
    {"_saddlepoint_K2", (DL_FUNC) &_saddlepoint_K2, 3},
    {"_saddlepoint_ineq_constraint", (DL_FUNC) &_saddlepoint_ineq_constraint, 3},
    {"_saddlepoint_neg_ll", (DL_FUNC) &_saddlepoint_neg_ll, 3},
    {"_saddlepoint_func_T", (DL_FUNC) &_saddlepoint_func_T, 3},
    {"_saddlepoint_K4operatorAABB", (DL_FUNC) &_saddlepoint_K4operatorAABB, 5},
    {"_saddlepoint_K3K3operatorAABBCC", (DL_FUNC) &_saddlepoint_K3K3operatorAABBCC, 6},
    {"_saddlepoint_make_sum_of_iidCGF", (DL_FUNC) &_saddlepoint_make_sum_of_iidCGF, 2},
    {"_saddlepoint_make_sum_of_independentCGF", (DL_FUNC) &_saddlepoint_make_sum_of_independentCGF, 1},
    {"_saddlepoint_make_ConcatenationCGF", (DL_FUNC) &_saddlepoint_make_ConcatenationCGF, 1},
    {"_saddlepoint_make_linearly_mappedCGF", (DL_FUNC) &_saddlepoint_make_linearly_mappedCGF, 2},
    {"_saddlepoint_make_randomly_stopped_sumCGF", (DL_FUNC) &_saddlepoint_make_randomly_stopped_sumCGF, 2},
    {"_saddlepoint_make_scalar_to_iidCGF", (DL_FUNC) &_saddlepoint_make_scalar_to_iidCGF, 1},
    {"_saddlepoint_make_iidReplicatesCGF", (DL_FUNC) &_saddlepoint_make_iidReplicatesCGF, 2},
    {"_saddlepoint_computeFuncTGradient", (DL_FUNC) &_saddlepoint_computeFuncTGradient, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_saddlepoint(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
