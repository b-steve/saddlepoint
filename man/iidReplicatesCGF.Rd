% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/D-IIDReplicatesCGF.R
\name{iidReplicatesCGF}
\alias{iidReplicatesCGF}
\title{Replicate a CGF over Multiple IID Blocks}
\usage{
iidReplicatesCGF(cgf, iidReps, ...)
}
\arguments{
\item{cgf}{A CGF object. Must be dimension \eqn{d}.}

\item{iidReps}{A positive integer \eqn{m} specifying how many IID blocks to create.
Must be at least 2 (since \code{iidReps=1} would just be the original CGF).}

\item{...}{Additional arguments passed to \code{\link{createCGF}} in case
you want to override any methods.}
}
\value{
A new CGF object that operates on length-\eqn{m d} input vectors, chunked
into \eqn{m} blocks, each block of length \eqn{d}.
}
\description{
This function takes any valid CGF object and extends it to handle
multiple IID blocks. Given \code{iidReps}, the input \code{tvec} is treated
as \code{iidReps} separate blocks, each of size \eqn{block_size = length(tvec)/\mathrm{iidReps}}.

For each operator (\eqn{K, K1, K2}, etc.), \code{iidReplicatesCGF()}:
\itemize{
\item Splits \code{tvec} (and any corresponding vectors \code{x,y,v1,...}) into sub-blocks.
\item Calls the original CGF operator on each sub-block.
\item Combines results by summation (for \eqn{K}, \eqn{K3}, \eqn{K4}), or by
forming block-diagonal (for \eqn{K2} and similar).
}

Effectively, if the original CGF is compatible with dimension \eqn{d}, and \code{iidReps=m},
the resulting CGF will be compatible with dimension \eqn{m d}, chunked into \eqn{m} blocks each
of size \eqn{d}.
}
\details{
Typically, you do not call \code{iidReplicatesCGF()} directly; instead, you set
\code{iidReps > 1} in a user-facing function like
\code{\link{linearlyMappedCGF}}, which internally calls \code{iidReplicatesCGF()}.
}
\examples{
# Suppose cgf is dimension=3, and we want 5 blocks => dimension=15
#   aggregator <- iidReplicatesCGF(cgf, iidReps=5)

}
