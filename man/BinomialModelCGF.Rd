% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/adaptedCGFs.R
\name{BinomialModelCGF}
\alias{BinomialModelCGF}
\title{BinomialCGF with flexible parameterization}
\usage{
BinomialModelCGF(n, prob)
}
\arguments{
\item{n}{adaptor or function representing the number of trials. Automatically converted
to an adaptor if provided as a function.}

\item{prob}{adaptor or function representing the probability parameter. Automatically converted
to an adaptor if provided as a function.}
}
\value{
'CGF' object.
}
\description{
Constructs a CGF object for the binomial distribution, supporting flexible parameter specifications through adaptors.
}
\details{
This function allows for dynamic parameter adjustments in three ways:
\enumerate{
\item \strong{Function-based adaptors}: Use R functions to dynamically compute parameters based on input vector.
\item \strong{Index-based adaptors}: Subset parameters from a vector using specified indices (\code{\link{indices.adaptor}}).
\item \strong{Fixed Value adaptors}: Set parameters to known constant values (\code{\link{fixed.parameter.adaptor}}).
For fixed parameter values, it is recommended to use \code{fixed.parameter.adaptor} and not function-based adaptors.
}
}
\examples{
\dontrun{
## Example using a fixed parameter for `n` and an index adaptor for `prob`
# `fixed.parameter.adaptor` sets `n` to a constant value of 10
n_adaptor <- fixed.parameter.adaptor(10)  

# `indices.adaptor` assumes `prob` is part of a parameter vector that will be accessed using the provided index
# For example, if the parameter vector at runtime is c(0.5), then `indices.adaptor(1)` will use the first element.
prob_adaptor <- indices.adaptor(1)  

# Create the CGF object with these adaptors
cgf <- BinomialModelCGF(n = n_adaptor, prob = prob_adaptor)

# Compute the first derivative of the CGF at tvec = 0, assuming the actual value of `prob` is 0.2
cgf$K1(tvec = 0, parameter_vector = 0.2)

## Example using a fixed parameter for `n` and a function for `prob`
# Define a function for `prob` that extracts the third element from a given vector
# This assumes that the parameter vector passed to the function will always have at least three elements
prob_function <- function(x) x[3] # returns the third element, which is expected to be the probability

# Create the CGF object
cgf1 <- BinomialModelCGF(n = n_adaptor, prob = prob_function)

# Example usage, assuming the parameter vector is supplied at runtime
# For instance, the parameter vector might be supplied during a calculation call
example_params <- c(0.1, 0.7, 0.2)  # Example vector, where 0.2 is the probability of success
cgf1$K1(tvec = 0, parameter_vector = example_params)

}
}
\seealso{
\code{\link{BinomialCGF}}
}
