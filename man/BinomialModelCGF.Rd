% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/C-BinomialCGF.R
\name{BinomialModelCGF}
\alias{BinomialModelCGF}
\title{Create a Parametric Binomial CGF Object}
\usage{
BinomialModelCGF(n, p, iidReps = 1, ...)
}
\arguments{
\item{n}{A function(\code{theta}) returning a \strong{positive integer} \eqn{n} (the number of trials).
\itemize{
\item Typically, you define a simple function, e.g. \code{function(theta) theta[1]}.
\item In many cases, an \strong{adaptor} object can be used instead (especially if \eqn{n} is constant or index-based).
}}

\item{p}{A function(\code{theta}) returning a numeric \eqn{p} in \eqn{[0, 1]}.
\itemize{
\item Similarly, can be a direct R function or an adaptor object for constant or index-based usage.
}}

\item{iidReps}{A positive integer. Specifies the number of i.i.d. replicates the CGF will expect in \code{tvec}.}

\item{...}{Additional arguments passed to the base CGF creation function, such as optional method overrides.}
}
\value{
A CGF object
}
\description{
#' @description
Constructs a Binomial CGF object where the number of trials \eqn{n(\theta)} and
the probability of success \eqn{p(\theta)} are derived from user-supplied logic.
Each of \code{n} and \code{p} can be an R function (or an adaptor) that
accepts a single parameter vector \code{theta} and returns the respective value.
}
\examples{
# Simple usage:
n_func <- function(theta) theta[1]  # e.g., 10
p_func <- function(theta) theta[2]  # e.g., 0.3
cgf_obj <- BinomialModelCGF(n = n_func, p = p_func, iidReps=1)
# Evaluate K1 at t=0 with param=c(10,0.3)
cgf_obj$K1(0.5, c(10, 0.3))

# Using adaptor objects 
n_adapt <- adaptor(fixed_param=10)  # always 10
p_adapt <- adaptor(indices=1)       # interpret param[1] as p
cgf_obj2 <- BinomialModelCGF(n=n_adapt, p=p_adapt, iidReps=1)
cgf_obj2$K1(0, 0.3) # p=0.3 from param

}
