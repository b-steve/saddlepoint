% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/adaptors.R
\name{adaptor}
\alias{adaptor}
\title{Create an \code{adaptor} object}
\usage{
adaptor(indices = NULL, fixed_param = NULL, r_func = NULL)
}
\arguments{
\item{indices}{A numeric vector of positive integers.}

\item{fixed_param}{A numeric vector or scalar to return.}

\item{r_func}{A function(\code{theta}) -> numeric.}
}
\value{
An object of class \code{adaptor}.
}
\description{
This function constructs an \code{adaptor} object from exactly one of:
\enumerate{
\item \code{indices}: A numeric vector of positive integer indices, used to subset
\code{theta}.
\item \code{fixed_param}: A numeric value (or vector) to be returned regardless of \code{theta}.
\item \code{r_func}: A custom R function of the form
\code{function(theta) -> numeric}.
}
}
\details{
Exactly \strong{one} of \code{indices}, \code{fixed_param}, or \code{r_func} must be non-\code{NULL}.
}
\examples{
\dontrun{
  # Example 1: Fixed and index-based parameter adaptors
  # Create a CGF object for a binomial distribution with a fixed parameter `n = 10`.
  # This configuration allows passing only the `prob` parameter in subsequent uses.
  binom_cgf <- BinomialModelCGF(n = adaptor(fixed_param = 10), prob = adaptor(indices = 1))
  # The object binom_cgf will expect only the `prob` parameter to be passed, since `n` is already set.
  binom_cgf$K1(tvec = 0, parameter_vector = 0.3)
  
  # Example 2: Function adaptor
  # Dynamically compute probability parameter based on the input vector.
  cgf <- BinomialModelCGF(n = adaptor(indices = 2), prob = function(y) y[1])
  cgf$K1(tvec = 0, parameter_vector = c(0.3, 10))
}
}
