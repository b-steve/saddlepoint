% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/adaptor-class.R
\name{adaptor}
\alias{adaptor}
\title{Create an adaptor object}
\usage{
adaptor(indices = NULL, fixed_param = NULL, r_func = NULL)
}
\arguments{
\item{indices}{Numeric vector of positive integers, used for creating an index-based adaptor. The indices are used to subset parameters from a vector using specified indices.}

\item{fixed_param}{Numeric vector of fixed parameters, used to set constant values for the parameters.}

\item{r_func}{A function that dynamically compute parameters based on input vector. The function should return the required parameters based on its input.}
}
\value{
An object of class "adaptor".
}
\description{
This function constructs an adaptor object based on the provided type of argument.
}
\details{
The function must be called with exactly one named argument out of \code{indices}, \code{fixed_param}, or \code{r_func}.
For For fixed parameter values, it is recommended to use \code{fixed_param} argument and not \code{r_func} argument.
}
\examples{
\dontrun{
  # Example 1: Fixed and index-based parameter adaptors
  # Create a CGF object for a binomial distribution with a fixed parameter `n = 10`.
  # This configuration allows passing only the `prob` parameter in subsequent uses.
  binom_cgf <- BinomialModelCGF(n = adaptor(fixed_param = 10), prob = adaptor(indices = 1))
  # This CGF object will expect only the `prob` parameter to be passed, since `n` is already set.
  binom_cgf$K1(tvec = 0, parameter_vector = 0.3)
  
  # Example 3: Function adaptor
  # Dynamically compute probability parameter based on the input vector.
  r_func_cgf <- BinomialModelCGF(n = adaptor(indices = 2), prob = function(y) y[1])
  r_func_cgf$K1(tvec = 0, parameter_vector = c(0.3, 10))
}
}
\seealso{
\code{\link{BinomialModelCGF}}
}
