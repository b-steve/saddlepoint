% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/GammaCGF.R
\name{GammaNonIdenticalModelCGF}
\alias{GammaNonIdenticalModelCGF}
\title{A CGF object for a vector of Non-Identical Gamma variables}
\usage{
GammaNonIdenticalModelCGF(shapes, rates, iidReps = 1, ...)
}
\arguments{
\item{shapes}{A function of one argument (\eqn{\theta}) returning a numeric vector
\eqn{(\alpha_1, \ldots, \alpha_d)} of shape parameters for each Gamma variable.}

\item{rates}{A function of one argument (\eqn{\theta}) returning a numeric vector
\eqn{(\beta_1, \ldots, \beta_d)} of rate parameters for each Gamma variable.}

\item{iidReps}{Integer. The number of IID replicates of the \eqn{d}-dimensional Gamma vector.
Must be a positive integer. Defaults to \code{1}.}

\item{...}{Additional arguments passed to the underlying CGF creation function.}
}
\value{
A CGF object
}
\description{
Creates a CGF object for a \eqn{d}-dimensional vector of independent, non-identically distributed
Gamma random variables. Each coordinate \eqn{i} is associated with its own shape \eqn{\alpha_i}
and rate \eqn{\beta_i}, determined by two user-provided functions:
\code{shapes} and \code{rates}.

The \code{shapes} function maps a user-specified parameter vector (e.g., \eqn{\theta})
to shape parameters \eqn{(\alpha_1, \ldots, \alpha_d)}, while the \code{rates} function
maps the same \eqn{\theta} to rate parameters \eqn{(\beta_1, \ldots, \beta_d)}.

While the focus is on modeling a single vector of independent, non-identical Gamma variables,
the design also supports IID replication of these vectors. The \code{iidReps} argument specifies
how many independent copies of the \eqn{d}-dimensional vector are being modeled. Thus,
each input \code{tvec} provided to CGF methods (such as \code{K}, \code{K1}, etc.) must have
length \eqn{d \times \text{iidReps}}.
}
\examples{
\dontrun{
# Suppose we have d=2 distinct Gamma variables in a single vector
# and want to replicate it iidReps=3 times for a total dimension of 6.
# shapes_fn <- function(theta) { c(theta[1], theta[2]) }  # alpha1, alpha2
# rates_fn  <- function(theta) { c(theta[3], theta[4]) }  # beta1,  beta2
#
# gamma_cgf_obj <- GammaNonIdenticalModelCGF(
#    shapes = shapes_fn,
#    rates  = rates_fn,
#    iidReps=3
# )
#
# # Now tvec must be length 6 
# tvec  <- rep(0.1, 6)
# param <- c(2.0, 1.5, 5.0, 4.0)  # example
#
# gamma_cgf_obj$K(tvec, param)    # Evaluate K
# gamma_cgf_obj$K1(tvec, param)   # Evaluate first derivative
# ...
}

}
