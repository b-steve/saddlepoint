% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/optimization-functions.R
\name{get.saddlepoint.eq.constraint.function}
\alias{get.saddlepoint.eq.constraint.function}
\title{Create saddlepoint equality constraint function}
\usage{
get.saddlepoint.eq.constraint.function(tvec, theta, observed.data, model.cgf)
}
\arguments{
\item{tvec}{A numeric vector.}

\item{theta}{A numeric vector.}

\item{observed.data}{A numeric vector. See TO DO list.}

\item{model.cgf}{An object of class 'CGF'.}
}
\value{
A function that accepts a vector 'a' as an argument. When \code{a = c(tvec, theta)} is passed to this function, it generates a list containing 'constraints' and 'jacobian'. 'constraints' are computed as \eqn{K'(t;\theta) - y}, and 'jacobian' represents the gradient of these constraints with respect to both \code{tvec} and \code{theta}.
}
\description{
This function creates and returns a function of the form \code{function(a) \{...\}}, where 'a' combines \code{tvec} and \code{theta} arguments to a single vector, in that order.
}
\details{
In this set up, the expression of the saddlepoint equation is defined by \eqn{K'(t;\theta) - y = 0} for \code{observed.data = y}. The returned function is designed to compute both \eqn{K'(t;\theta) - y} and its gradient with respect to both \code{tvec} and \code{theta}.
}
\examples{
\dontrun{
TO DO: write a working example
  f <- get.saddlepoint_eq_constraint.function(tvec, theta, observed.data, model.cgf)
  f(c(tvec, theta)) # returns a list of the form list(constraints = , jacobian = )
}
}
