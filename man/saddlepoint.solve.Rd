% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/B-optimization-functions.R
\name{saddlepoint.solve}
\alias{saddlepoint.solve}
\title{Numerical saddlepoint equation solver}
\usage{
saddlepoint.solve(
  theta,
  y,
  cgf,
  starting.tvec = rep(0, times = length(y)),
  lb = rep(-Inf, times = length(y)),
  ub = rep(Inf, times = length(y)),
  sadd.eqn.opts = list(ftol_abs = 0, maxeval = 1000, xtol_rel = 1e-12, print_level = 0),
  warn_residual = TRUE,
  tol = 1e-04
)
}
\arguments{
\item{theta}{Numeric vector of model parameters for which the CGF is defined.}

\item{y}{Numeric vector of observations.}

\item{cgf}{A CGF object (class \code{"CGF"}).}

\item{starting.tvec}{Numeric start values for \eqn{t}, defaults to \code{0} for each element.}

\item{lb, ub}{Numeric vectors for lower and upper bounds of \eqn{t},
each having the same length as \code{starting.tvec}. Defaults are \code{-Inf} and \code{Inf}.}

\item{sadd.eqn.opts}{List of options for the \code{nloptr} optimizer.
Defaults to \code{list(ftol_abs = 0, maxeval = 1e3, xtol_rel = 1.0e-12, print_level = 0)},
with algorithm fixed at \code{"NLOPT_LD_SLSQP"}.}

\item{warn_residual}{Logical. If \code{TRUE}, compute the residual
\eqn{\|\mathit{K1}(t^*;\theta)-y\|_\infty} and warn if it exceeds \code{tol}.}

\item{tol}{Numeric tolerance for residual checks (default \code{1e-4}).}
}
\value{
A numeric vector \eqn{t} solving \eqn{K1(t, \theta) = y}.
}
\description{
Solves the saddlepoint equation \eqn{K1(t; \theta) = y} for a given CGF object.
It uses numeric optimization (via \code{nloptr}) to find the vector \eqn{t}
that satisfies \eqn{K1(t; \theta) = y}.

If the CGF object offers an analytical solution
(see \code{cgf_object$analytic_tvec_hat} if available), you may prefer that
approach instead.
}
\details{
Minimizes the function \eqn{K(t; \theta) - \sum(t_i y_i)} to enforce \eqn{K1(t, \theta) = y}.
}
\examples{
\dontrun{
# TO DO: Add examples
}

}
\references{
\itemize{
\item \href{https://nlopt.readthedocs.io/en/latest/}{NLOpt Documentation}
}
}
